import {
  ArrowDownOnSquareStackIcon,
  ArrowPathIcon,
  CodeBracketIcon,
  Cog8ToothIcon,
  DocumentDuplicateIcon,
  DocumentPlusIcon,
  FolderIcon,
  FolderPlusIcon,
  MagnifyingGlassIcon,
  PlayIcon,
  SquaresPlusIcon,
  UserCircleIcon,
} from '@heroicons/react/24/outline/';
import { type NextPage } from 'next';
import Head from 'next/head';
import { Fragment, useState } from 'react';
import { clg } from '../utils';

interface IFile {
  key: number;
  title: string;
  value: boolean;
}

interface IFolder {
  key: number;
  title: string;
  value: boolean;
  children: IFile[];
}

const FOLDERS: IFolder[] = [
  {
    key: 1,
    title: 'Home',
    value: false,
    children: [
      { key: 11, title: 'home.tsx', value: false },
      { key: 12, title: 'index.tsx', value: false },
    ],
  },
  {
    key: 2,
    title: 'Projects',
    value: false,
    children: [
      { key: 21, title: 'projects.tsx', value: false },
      { key: 22, title: 'index.tsx', value: false },
    ],
  },
  {
    key: 3,
    title: 'Experience',
    value: false,
    children: [
      { key: 31, title: 'experiences.tsx', value: false },
      { key: 32, title: 'index.tsx', value: false },
    ],
  },
  {
    key: 4,
    title: 'Skills',
    value: true,
    children: [
      { key: 41, title: 'skills.tsx', value: false },
      { key: 42, title: 'index.tsx', value: true },
    ],
  },
];

const Home: NextPage = () => {
  const [folders, setFolders] = useState<IFolder[]>(FOLDERS);
  const [activeFile, setActiveFile] = useState<IFile | undefined>(
    FOLDERS.find((folder) =>
      folder.children.find((file) => file.value === true)
    )?.children.find((file) => file.value === true)
  );

  const handleFolderClick = (key: number) => {
    // Find the clicked folder
    const clickedFolder = folders.find((folder) => folder.key === key);
    if (!clickedFolder) return;
    // Change the value of the clicked folder
    clickedFolder.value = !clickedFolder.value;
    // Remove the old clicked folder from the folders array
    const newFolders = folders.filter((folder) => folder.key !== key);
    // Add the new clicked folder to the folders array
    if (newFolders.length > 0) setFolders([...newFolders, clickedFolder]);
  };

  const clearAllChildrenValues = () => {
    // Find the active parent folder
    const activeParent = folders.find((folder) =>
      folder.children.find((file) => file.value === true)
    );
    if (!activeParent) return;
    // Find the active file
    const activeChildren = activeParent.children.find(
      (file) => file.value === true
    );
    if (!activeChildren) return;
    // Clear the value of the active file
    activeChildren.value = false;

    // Remove the old active file from the active parent folder
    const newChildren = activeParent.children.filter(
      (file) => file.key !== activeChildren.key
    );
    // Add the new active file to the active parent folder
    activeParent.children = [...newChildren, activeChildren];

    // Remove the old active parent folder from the folders array
    const newFolders = folders.filter(
      (folder) => folder.key !== activeParent.key
    );
    // Add the new active parent folder to the folders array
    setFolders([...newFolders, activeParent]);
  };

  const handleFileClick = (key: number) => {
    // Find the clicked folder
    const clickedFolder = folders.find((folder) =>
      folder.children.find((file) => file.key === key)
    );
    if (!clickedFolder) return;
    // Find the clicked file
    const clickedFile = clickedFolder.children.find((file) => file.key === key);
    if (!clickedFile) return;
    // Clear all existing children state
    clearAllChildrenValues();
    // Change the value of the clicked file to true
    clickedFile.value = true;
    // Remove the old clicked file from the children array
    clickedFolder.children = clickedFolder.children.filter(
      (file) => file.key !== key
    );
    // Add the new clicked file to the children array
    if (clickedFolder.children.length > 0) {
      clickedFolder.children = [...clickedFolder.children, clickedFile];
    }
    // Remove the old clicked folder from the folders array
    const newFolders = folders.filter(
      (folder) => folder.key !== clickedFolder.key
    );
    // Add the new clicked folder to the folders array
    if (newFolders.length > 0) setFolders([...newFolders, clickedFolder]);
    // Update the active file state
    setActiveFile(clickedFile);
  };

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {/* <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]"> */}
      <main className="relative min-h-screen overflow-hidden bg-slate-900 p-16">
        {/* Window */}
        <div className="relative flex min-h-[900px] rounded-2xl bg-gradient-to-br from-slate-400/40 to-slate-400/0 p-4">
          {/* Icon Indicator Line */}
          <div className="absolute top-[40px] -left-4 h-[1px] w-8 rotate-90 bg-cyan-300 blur-[1px]" />
          {/* Left Icon Bar */}
          <div className="flex flex-col justify-between gap-8 p-2">
            {/* Body */}
            <div className="flex flex-col gap-8">
              <DocumentDuplicateIcon className="h-8 w-8 text-slate-100" />
              <MagnifyingGlassIcon className="h-8 w-8 text-slate-400" />
              <SquaresPlusIcon className="h-8 w-8 text-slate-400" />
              <PlayIcon className="h-8 w-8 text-slate-400" />
            </div>
            {/* Bottom */}
            <div className="flex flex-col gap-4">
              <UserCircleIcon className="h-8 w-8 text-slate-400" />
              <Cog8ToothIcon className="h-8 w-8 text-slate-400" />
            </div>
          </div>
          {/* Left Menu Bar */}
          <div className="flex flex-col gap-4 py-2 px-4">
            {/* Topbar */}
            <div className="flex gap-16">
              {/* Text */}
              <p className="select-none font-segoeui text-base font-normal text-slate-100">
                EXPLORER
              </p>
              {/* Buttons */}
              <div className="flex gap-2">
                <DocumentPlusIcon className="h-6 w-6 text-slate-400" />
                <FolderPlusIcon className="h-6 w-6 text-slate-400" />
                <ArrowPathIcon className="h-6 w-6 text-slate-400" />
                <ArrowDownOnSquareStackIcon className="h-6 w-6 text-slate-400" />
              </div>
            </div>
            {/* Folders */}
            {folders
              .sort((a, b) => a.key - b.key)
              .map((folder) => (
                <Fragment key={folder.key}>
                  {/* Top Folder */}
                  <button
                    className="flex cursor-pointer items-center gap-2"
                    onClick={() => handleFolderClick(folder.key)}
                    type="button"
                  >
                    <FolderIcon
                      className={clg(
                        'h-6 w-6',
                        { 'text-slate-100': folder.value },
                        { 'text-slate-400': !folder.value }
                      )}
                    />
                    <span
                      className={clg(
                        'select-none font-segoeui text-base font-normal',
                        { 'text-slate-100': folder.value },
                        { 'text-slate-400': !folder.value }
                      )}
                    >
                      {folder.title}
                    </span>
                  </button>
                  {/* Inner Files */}
                  {folder.children &&
                    folder.children
                      .sort((a, b) => a.key - b.key)
                      .map((child) => (
                        <button
                          key={child.key}
                          className={clg(
                            'cursor-pointer items-center gap-2 pl-2',
                            { flex: folder.value },
                            { hidden: !folder.value }
                          )}
                          onClick={() => handleFileClick(child.key)}
                          type="button"
                        >
                          <CodeBracketIcon
                            className={clg(
                              'h-6 w-6',
                              { 'text-cyan-300': child.value },
                              { 'text-slate-400': !child.value }
                            )}
                          />
                          <span
                            className={clg(
                              'select-none font-segoeui text-base font-normal',
                              { 'text-cyan-300': child.value },
                              { 'text-slate-400': !child.value }
                            )}
                          >
                            {child.title}
                          </span>
                        </button>
                      ))}
                </Fragment>
              ))}
          </div>
        </div>
        {/* Circles */}
        <div className="absolute left-[1066px] top-[315px] h-[100px] w-[100px] rounded-full bg-cyan-300 mix-blend-screen blur-3xl" />
        <div className="absolute left-[395px] top-[741px] h-[100px] w-[100px] rounded-full bg-cyan-300 mix-blend-screen blur-3xl" />
      </main>
    </>
  );
};

export default Home;
