import {
  CodeBracketIcon,
  Cog8ToothIcon,
  DocumentDuplicateIcon,
  MagnifyingGlassIcon,
  PlayIcon,
  SquaresPlusIcon,
  UserCircleIcon,
  XMarkIcon,
} from '@heroicons/react/24/outline/';

import { type NextPage } from 'next';
import Head from 'next/head';
import { createRef, type MouseEvent, useEffect, useRef, useState } from 'react';
import Editor from 'react-simple-code-editor';
import SimpleBar from 'simplebar-react';
import { LeftMenuBar } from '../components';
import { useDocumentsStore } from '../stores';
// import { type IDocument } from '../types';
import { clg, findParents, getCodeContent, searchByKey, updateFileContent } from '../utils';

// const getActiveDocumentContent: (activeFile: number, documents: IDocument[]) => string = (
//   activeFile,
//   documents
// ) => {
//   const activeDocument = searchByKey(activeFile, documents);
//   let content = '';
//   if (activeDocument && activeDocument.type === 'FILE') content = activeDocument.content;
//   return content;
// };

const Home: NextPage = () => {
  const documents = useDocumentsStore((state) => state.documents);

  // Active tabs
  const activeTabs = useDocumentsStore((state) => state.activeTabs);
  const removeActiveTab = useDocumentsStore((state) => state.removeActiveTab);
  // Active file
  const activeFile = useDocumentsStore((state) => state.activeFile);
  const setActiveFile = useDocumentsStore((state) => state.setActiveFile);
  // Active file code content
  const findActiveFile = useDocumentsStore((state) => state.findActiveFile);
  const updateContent = useDocumentsStore((state) => state.findAndUpdateContent);
  // Scrollable node ref
  const scrollableNodeRef = createRef();

  const handleTabClose = (e: MouseEvent<HTMLButtonElement>, key: number) => {
    e.stopPropagation();
    if (activeFile === key) {
      const index = activeTabs.findIndex((tab) => tab === key);
      const newActiveFile = activeTabs[index + 1] || activeTabs[index - 1];
      if (newActiveFile) setActiveFile(newActiveFile);
      else setActiveFile(-1);
    }
    // Remove the tab from the activeTabs list
    removeActiveTab(key);
  };

  // TODO: run like code
  const handleRunCode = () => {
    // Get active parent
    const parents = findParents(activeFile, documents);
    const activeTopParent = parents[parents.length - 1];

    console.log(activeTopParent);
  };

  useEffect(() => {
    const handleScrollPosition = () => {
      const parentElement = scrollableNodeRef.current as Element;
      const activeTabElement = document.getElementById(activeFile.toString());
      const parentPos = parentElement?.getBoundingClientRect() as DOMRect;
      const childPos = activeTabElement?.getBoundingClientRect() as DOMRect;

      const left = childPos.left - parentPos.left;
      if (left < 0 || left + 100 > parentPos.width) {
        parentElement.scrollTo({
          left,
          behavior: 'smooth',
        });
      }
    };
    handleScrollPosition();
  }, [activeFile, scrollableNodeRef]);

  // Get code content of active file
  // const activeDocument = searchByKey(activeFile, documents);
  // let content: (React.ReactElement | string)[] = [];
  // if (activeDocument && activeDocument.type === 'FILE')
  //   content = getCodeContent(activeDocument.content);

  // const [activeContent, setActiveContent] = useState(
  //   getActiveDocumentContent(activeFile, documents)
  // );
  // const [code, setCode] = useState(`function add(a, b) {\n  return a + b;\n}`);
  // useState(searchByKey(activeFile, documents).content);

  // useEffect(() => {
  //   setActiveContent(getActiveDocumentContent(activeFile, documents));
  // }, [activeFile, documents]);
  // const tab = useRef<HTMLDivElement>(null);
  // TODO: add line numbers
  const test = () => {
    // const parentElement = scrollableNodeRef.current as Element;
    // const activeTabElement = document.getElementById(activeFile.toString());
    // const parentPos = parentElement?.getBoundingClientRect() as DOMRect;
    // const childPos = activeTabElement?.getBoundingClientRect() as DOMRect;
    // const left = childPos.left - parentPos.left;
    // console.log('scrollLeft', parentElement.scrollLeft);
    // console.log('width', parentPos.width);
    // console.log('activeFile', childPos.left);
    // console.log('left', left);
    // if (left < 0 || left + 100 > parentPos.width) {
    //   console.log('not seen');
    // } else console.log('seen');
  };

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {/* <main className="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]"> */}
      <main className="relative min-h-screen overflow-hidden bg-slate-900 p-16">
        {/* Window */}
        <div className="relative flex h-[calc(100vh_-_8rem)] rounded-2xl bg-gradient-to-br from-slate-400/40 to-slate-400/0 p-4 ">
          {/* Icon Indicator Line */}
          <div className="absolute top-[40px] -left-4 h-[1px] w-8 rotate-90 bg-cyan-300 blur-[1px]" />
          {/* Left Icon Bar */}
          <div className="flex flex-col justify-between gap-8 p-2">
            {/* Body */}
            <div className="flex flex-col gap-8">
              <DocumentDuplicateIcon className="h-8 w-8 cursor-pointer text-slate-100" />
              <MagnifyingGlassIcon
                className="h-8 w-8 cursor-pointer text-slate-400"
                onClick={() => {
                  test();
                }}
              />
              <SquaresPlusIcon className="h-8 w-8 cursor-pointer text-slate-400" />
              <PlayIcon className="h-8 w-8 cursor-pointer text-slate-400" onClick={handleRunCode} />
            </div>
            {/* Bottom */}
            <div className="flex flex-col gap-4">
              <UserCircleIcon className="h-8 w-8 text-slate-400" />
              <Cog8ToothIcon className="h-8 w-8 text-slate-400" />
            </div>
          </div>
          {/* Left Menu Bar */}
          <LeftMenuBar />
          {/* BODY */}
          <div className="flex w-full flex-col gap-2 overflow-hidden p-2">
            {/* TABS */}
            <SimpleBar className="w-full pb-2" scrollableNodeProps={{ ref: scrollableNodeRef }}>
              <div className="flex gap-4">
                {activeTabs.map((key) => (
                  <div
                    key={key}
                    id={key.toString()}
                    className={clg(
                      'group relative rounded bg-gradient-to-br from-slate-700/40 to-slate-700/0 backdrop-blur-sm',
                      {
                        'border-b border-cyan-300': activeFile === key,
                      },
                      {
                        'border-b border-transparent': activeFile !== key,
                      }
                    )}
                  >
                    <button
                      className="flex items-center gap-2 p-2 pr-9"
                      type="button"
                      onClick={() => setActiveFile(key)}
                    >
                      <CodeBracketIcon className="h-6 w-6 text-slate-100" />
                      <span className="font-consolas text-base font-normal italic text-slate-100">
                        {searchByKey(key, documents)?.title}
                      </span>
                    </button>
                    <button
                      className="invisible absolute right-2 top-1/2 -translate-y-1/2 rounded p-[2px] text-slate-100 opacity-0 hover:bg-gradient-to-br hover:from-red-700/60 hover:to-red-700/20 group-hover:visible group-hover:opacity-100"
                      onClick={(e) => handleTabClose(e, key)}
                      type="button"
                    >
                      <XMarkIcon className="h-4 w-4" />
                    </button>
                  </div>
                ))}
              </div>
            </SimpleBar>
            {/* EDITOR */}
            <div className="language-tsx flex w-full overflow-hidden">
              <SimpleBar className="w-full">
                <Editor
                  value={findActiveFile(activeFile)?.content ?? ''}
                  onValueChange={(newCode) => updateContent(activeFile, newCode)}
                  highlight={(hCode) => getCodeContent(hCode)}
                  placeholder="Write some code..."
                  className="min-h-[40px] w-full"
                />
              </SimpleBar>
            </div>
          </div>
        </div>
        {/* Circles */}
        <div className="absolute left-[1066px] top-[315px] h-[100px] w-[100px] rounded-full bg-cyan-300 mix-blend-screen blur-3xl" />
        <div className="absolute left-[395px] top-[741px] h-[100px] w-[100px] rounded-full bg-cyan-300 mix-blend-screen blur-3xl" />
      </main>
    </>
  );
};

export default Home;
// TODO: remove when complete https://codesandbox.io/s/hungry-pine-k7g0y9?file=/src/document.js:166-187
